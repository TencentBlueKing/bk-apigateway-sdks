/**
 * TencentBlueKing is pleased to support the open source community by
 * making 蓝鲸智云-蓝鲸 PaaS 平台(BlueKing-PaaS) available.
 * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	define "github.com/TencentBlueKing/bk-apigateway-sdks/core/define"
	gomock "github.com/golang/mock/gomock"
)

// MockBkApiClient is a mock of BkApiClient interface.
type MockBkApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockBkApiClientMockRecorder
}

// MockBkApiClientMockRecorder is the mock recorder for MockBkApiClient.
type MockBkApiClientMockRecorder struct {
	mock *MockBkApiClient
}

// NewMockBkApiClient creates a new mock instance.
func NewMockBkApiClient(ctrl *gomock.Controller) *MockBkApiClient {
	mock := &MockBkApiClient{ctrl: ctrl}
	mock.recorder = &MockBkApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBkApiClient) EXPECT() *MockBkApiClientMockRecorder {
	return m.recorder
}

// AddOperationOptions mocks base method.
func (m *MockBkApiClient) AddOperationOptions(opts ...define.OperationOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddOperationOptions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOperationOptions indicates an expected call of AddOperationOptions.
func (mr *MockBkApiClientMockRecorder) AddOperationOptions(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock,
		"AddOperationOptions",
		reflect.TypeOf((*MockBkApiClient)(nil).AddOperationOptions),
		opts...)
}

// Apply mocks base method.
func (m *MockBkApiClient) Apply(opts ...define.BkApiClientOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Apply", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockBkApiClientMockRecorder) Apply(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock,
		"Apply",
		reflect.TypeOf((*MockBkApiClient)(nil).Apply),
		opts...)
}

// Name mocks base method.
func (m *MockBkApiClient) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockBkApiClientMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockBkApiClient)(nil).Name))
}

// NewOperation mocks base method.
func (m *MockBkApiClient) NewOperation(
	config define.OperationConfigProvider,
	opts ...define.OperationOption,
) define.Operation {
	m.ctrl.T.Helper()
	varargs := []interface{}{config}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewOperation", varargs...)
	ret0, _ := ret[0].(define.Operation)
	return ret0
}

// NewOperation indicates an expected call of NewOperation.
func (mr *MockBkApiClientMockRecorder) NewOperation(config interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{config}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock,
		"NewOperation",
		reflect.TypeOf((*MockBkApiClient)(nil).NewOperation),
		varargs...)
}

// MockBkApiClientOption is a mock of BkApiClientOption interface.
type MockBkApiClientOption struct {
	ctrl     *gomock.Controller
	recorder *MockBkApiClientOptionMockRecorder
}

// MockBkApiClientOptionMockRecorder is the mock recorder for MockBkApiClientOption.
type MockBkApiClientOptionMockRecorder struct {
	mock *MockBkApiClientOption
}

// NewMockBkApiClientOption creates a new mock instance.
func NewMockBkApiClientOption(ctrl *gomock.Controller) *MockBkApiClientOption {
	mock := &MockBkApiClientOption{ctrl: ctrl}
	mock.recorder = &MockBkApiClientOptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBkApiClientOption) EXPECT() *MockBkApiClientOptionMockRecorder {
	return m.recorder
}

// ApplyToClient mocks base method.
func (m *MockBkApiClientOption) ApplyToClient(client define.BkApiClient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyToClient", client)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyToClient indicates an expected call of ApplyToClient.
func (mr *MockBkApiClientOptionMockRecorder) ApplyToClient(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock,
		"ApplyToClient",
		reflect.TypeOf((*MockBkApiClientOption)(nil).ApplyToClient),
		client,
	)
}
