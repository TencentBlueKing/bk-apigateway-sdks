/**
 * TencentBlueKing is pleased to support the open source community by
 * making 蓝鲸智云-蓝鲸 PaaS 平台(BlueKing-PaaS) available.
 * Copyright (C) 2017-2021 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	define "github.com/TencentBlueKing/bk-apigateway-sdks/bkapi-client-core/define"
	gomock "github.com/golang/mock/gomock"
)

// MockBodyProvider is a mock of BodyProvider interface.
type MockBodyProvider struct {
	ctrl     *gomock.Controller
	recorder *MockBodyProviderMockRecorder
}

// MockBodyProviderMockRecorder is the mock recorder for MockBodyProvider.
type MockBodyProviderMockRecorder struct {
	mock *MockBodyProvider
}

// NewMockBodyProvider creates a new mock instance.
func NewMockBodyProvider(ctrl *gomock.Controller) *MockBodyProvider {
	mock := &MockBodyProvider{ctrl: ctrl}
	mock.recorder = &MockBodyProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBodyProvider) EXPECT() *MockBodyProviderMockRecorder {
	return m.recorder
}

// ProvideBody mocks base method.
func (m *MockBodyProvider) ProvideBody(operation define.Operation, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvideBody", operation, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProvideBody indicates an expected call of ProvideBody.
func (mr *MockBodyProviderMockRecorder) ProvideBody(operation, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvideBody", reflect.TypeOf((*MockBodyProvider)(nil).ProvideBody), operation, data)
}

// MockResultProvider is a mock of ResultProvider interface.
type MockResultProvider struct {
	ctrl     *gomock.Controller
	recorder *MockResultProviderMockRecorder
}

// MockResultProviderMockRecorder is the mock recorder for MockResultProvider.
type MockResultProviderMockRecorder struct {
	mock *MockResultProvider
}

// NewMockResultProvider creates a new mock instance.
func NewMockResultProvider(ctrl *gomock.Controller) *MockResultProvider {
	mock := &MockResultProvider{ctrl: ctrl}
	mock.recorder = &MockResultProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultProvider) EXPECT() *MockResultProviderMockRecorder {
	return m.recorder
}

// ProvideResult mocks base method.
func (m *MockResultProvider) ProvideResult(response *http.Response, result interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvideResult", response, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProvideResult indicates an expected call of ProvideResult.
func (mr *MockResultProviderMockRecorder) ProvideResult(response, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvideResult", reflect.TypeOf((*MockResultProvider)(nil).ProvideResult), response, result)
}
